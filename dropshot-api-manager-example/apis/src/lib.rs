// Copyright 2025 Oxide Computer Company

//! Example API descriptions for the Dropshot API manager -- a couple of
//! examples, one that's lockstep and one that's versioned.

pub mod lockstep {
    use dropshot::{HttpError, HttpResponseOk, RequestContext};

    #[dropshot::api_description]
    pub trait LockstepApi {
        type Context;

        /// Get the value of the counter.
        #[endpoint { method = GET, path = "/counter" }]
        async fn get_counter(
            rqctx: RequestContext<Self::Context>,
        ) -> Result<HttpResponseOk<u32>, HttpError>;
    }
}

pub mod versioned {
    use dropshot::{HttpError, HttpResponseOk, RequestContext};
    use dropshot_api_manager_types::api_versions;
    use schemars::JsonSchema;
    use serde::Serialize;

    api_versions!([
        // EXERCISE: Try uncommenting the following line, then running
        // `cargo example-openapi generate`.
        // (3, THREE_DOT_OH),
        (2, TWO_DOT_OH),
        (1, INITIAL),
    ]);

    #[dropshot::api_description]
    pub trait VersionedApi {
        type Context;

        /// Fetch `thing`
        #[endpoint {
            method = GET,
            path = "/thing",
            // Both get_thing_v1 and get_thing_v2 have the same `operation_id`,
            // which means that clients for each version generated by Progenitor
            // will use the same method name.
            operation_id = "get_thing",
            versions = "1.0.0"..VERSION_TWO_DOT_OH
        }]
        async fn get_thing_v1(
            rqctx: RequestContext<Self::Context>,
        ) -> Result<HttpResponseOk<ThingV1>, HttpError>;

        /// Fetch `thing`
        #[endpoint {
            method = GET,
            path = "/thing",
            // Both get_thing_v1 and get_thing_v2 have the same `operation_id`,
            // which means that clients for each version generated by Progenitor
            // will use the same method name.
            operation_id = "get_thing",
            versions = "2.0.0"..
        }]
        async fn get_thing_v2(
            rqctx: RequestContext<Self::Context>,
        ) -> Result<HttpResponseOk<ThingV2>, HttpError>;
    }

    #[derive(Serialize, JsonSchema)]
    struct ThingV1 {
        thing_str: &'static str,
        // EXERCISE: Comment out the line above, and uncomment the line below, to
        // introduce a breaking change to the blessed 1.0.0 version of this
        // API.
        // thing_number: u32,
    }

    #[derive(Serialize, JsonSchema)]
    struct ThingV2 {
        thing_number: u32,
    }
}
