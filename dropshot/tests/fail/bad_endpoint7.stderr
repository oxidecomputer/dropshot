error[E0277]: the trait bound `Ret: serde::ser::Serialize` is not satisfied
  --> tests/fail/bad_endpoint7.rs:24:6
   |
24 | ) -> Result<HttpResponseOk<Ret>, HttpError> {
   |      ^^^^^^ the trait `serde::ser::Serialize` is not implemented for `Ret`, which is required by `Result<HttpResponseOk<Ret>, HttpError>: ResultTrait`
   |
   = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Ret` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `serde::ser::Serialize`:
             &'a T
             &'a mut T
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
           and $N others
   = note: required for `Ret` to implement `dropshot::handler::HttpResponseContent`
   = note: required for `HttpResponseOk<Ret>` to implement `HttpCodedResponse`
   = note: required for `HttpResponseOk<Ret>` to implement `HttpResponse`
note: required for `Result<HttpResponseOk<Ret>, HttpError>` to implement `ResultTrait`
  --> tests/fail/bad_endpoint7.rs:24:6
   |
18 | / #[endpoint {
19 | |     method = GET,
20 | |     path = "/test",
21 | | }]
   | |__- unsatisfied trait bound introduced here
...
24 |   ) -> Result<HttpResponseOk<Ret>, HttpError> {
   |        ^^^^^^

error[E0277]: the trait bound `Ret: serde::ser::Serialize` is not satisfied
  --> tests/fail/bad_endpoint7.rs:24:13
   |
24 | ) -> Result<HttpResponseOk<Ret>, HttpError> {
   |             ^^^^^^^^^^^^^^^^^^^ the trait `serde::ser::Serialize` is not implemented for `Ret`, which is required by `Ret: dropshot::handler::HttpResponseContent`
   |
   = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Ret` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `serde::ser::Serialize`:
             &'a T
             &'a mut T
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
           and $N others
   = note: required for `Ret` to implement `dropshot::handler::HttpResponseContent`
note: required by a bound in `HttpResponseOk`
  --> src/handler.rs
   |
   | pub struct HttpResponseOk<T: HttpResponseContent + Send + Sync + 'static>(
   |                              ^^^^^^^^^^^^^^^^^^^ required by this bound in `HttpResponseOk`

error[E0277]: the trait bound `Ret: dropshot::handler::HttpResponseContent` is not satisfied
  --> tests/fail/bad_endpoint7.rs:25:23
   |
25 |       Ok(HttpResponseOk(Ret {
   |  ________--------------_^
   | |        |
   | |        required by a bound introduced by this call
26 | |         x: "Oxide".to_string(),
27 | |         y: 0x1de,
28 | |     }))
   | |_____^ the trait `serde::ser::Serialize` is not implemented for `Ret`, which is required by `Ret: dropshot::handler::HttpResponseContent`
   |
   = help: the following other types implement trait `dropshot::handler::HttpResponseContent`:
             FreeformBody
             dropshot::handler::Empty
   = note: required for `Ret` to implement `dropshot::handler::HttpResponseContent`
note: required by a bound in `HttpResponseOk`
  --> src/handler.rs
   |
   | pub struct HttpResponseOk<T: HttpResponseContent + Send + Sync + 'static>(
   |                              ^^^^^^^^^^^^^^^^^^^ required by this bound in `HttpResponseOk`

error[E0277]: the trait bound `Ret: serde::ser::Serialize` is not satisfied
  --> tests/fail/bad_endpoint7.rs:25:5
   |
25 |     Ok(HttpResponseOk(Ret {
   |     ^^ the trait `serde::ser::Serialize` is not implemented for `Ret`, which is required by `Ret: dropshot::handler::HttpResponseContent`
   |
   = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Ret` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `serde::ser::Serialize`:
             &'a T
             &'a mut T
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
           and $N others
   = note: required for `Ret` to implement `dropshot::handler::HttpResponseContent`
note: required by a bound in `HttpResponseOk`
  --> src/handler.rs
   |
   | pub struct HttpResponseOk<T: HttpResponseContent + Send + Sync + 'static>(
   |                              ^^^^^^^^^^^^^^^^^^^ required by this bound in `HttpResponseOk`

error[E0277]: the trait bound `Ret: serde::ser::Serialize` is not satisfied
  --> tests/fail/bad_endpoint7.rs:25:5
   |
25 | /     Ok(HttpResponseOk(Ret {
26 | |         x: "Oxide".to_string(),
27 | |         y: 0x1de,
28 | |     }))
   | |_______^ the trait `serde::ser::Serialize` is not implemented for `Ret`, which is required by `Ret: dropshot::handler::HttpResponseContent`
   |
   = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Ret` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `serde::ser::Serialize`:
             &'a T
             &'a mut T
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
           and $N others
   = note: required for `Ret` to implement `dropshot::handler::HttpResponseContent`
note: required by a bound in `HttpResponseOk`
  --> src/handler.rs
   |
   | pub struct HttpResponseOk<T: HttpResponseContent + Send + Sync + 'static>(
   |                              ^^^^^^^^^^^^^^^^^^^ required by this bound in `HttpResponseOk`

error[E0277]: the trait bound `Ret: serde::ser::Serialize` is not satisfied
  --> tests/fail/bad_endpoint7.rs:22:1
   |
22 | / async fn bad_endpoint(
23 | |     _rqctx: RequestContext<()>,
24 | | ) -> Result<HttpResponseOk<Ret>, HttpError> {
   | |___________________________________________^ the trait `serde::ser::Serialize` is not implemented for `Ret`, which is required by `Ret: dropshot::handler::HttpResponseContent`
   |
   = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Ret` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `serde::ser::Serialize`:
             &'a T
             &'a mut T
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
           and $N others
   = note: required for `Ret` to implement `dropshot::handler::HttpResponseContent`
note: required by a bound in `HttpResponseOk`
  --> src/handler.rs
   |
   | pub struct HttpResponseOk<T: HttpResponseContent + Send + Sync + 'static>(
   |                              ^^^^^^^^^^^^^^^^^^^ required by this bound in `HttpResponseOk`

error[E0277]: the trait bound `fn(RequestContext<()>) -> impl Future<Output = Result<HttpResponseOk<Ret>, HttpError>> {<impl std::convert::From<bad_endpoint> for ApiEndpoint<<RequestContext<()> as RequestContextArgument>::Context>>::from::bad_endpoint}: dropshot::handler::HttpHandlerFunc<_, _, _>` is not satisfied
  --> tests/fail/bad_endpoint7.rs:22:10
   |
18 | / #[endpoint {
19 | |     method = GET,
20 | |     path = "/test",
21 | | }]
   | |__- required by a bound introduced by this call
22 |   async fn bad_endpoint(
   |            ^^^^^^^^^^^^ the trait `dropshot::handler::HttpHandlerFunc<_, _, _>` is not implemented for fn item `fn(RequestContext<()>) -> impl Future<Output = Result<HttpResponseOk<Ret>, HttpError>> {<impl std::convert::From<bad_endpoint> for ApiEndpoint<<RequestContext<()> as RequestContextArgument>::Context>>::from::bad_endpoint}`
   |
note: required by a bound in `ApiEndpoint::<Context>::new`
  --> src/api_description.rs
   |
   |     pub fn new<HandlerType, FuncParams, ResponseType>(
   |            --- required by a bound in this associated function
...
   |         HandlerType: HttpHandlerFunc<Context, FuncParams, ResponseType>,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ApiEndpoint::<Context>::new`
