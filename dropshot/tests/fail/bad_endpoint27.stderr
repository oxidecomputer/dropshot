error: endpoint `bad_endpoint` appears to be a trait function
       note: did you mean to use `#[dropshot::api_description]` instead?
  --> tests/fail/bad_endpoint27.rs:20:5
   |
20 | /     async fn bad_endpoint(
21 | |         _rqctx: RequestContext<Self::Context>,
22 | |     ) -> Result<HttpResponseUpdatedNoContent, HttpError>;
   | |________________________________________________________^

error[E0277]: `<Self as MyTrait>::Context` cannot be sent between threads safely
  --> tests/fail/bad_endpoint27.rs:21:17
   |
21 |         _rqctx: RequestContext<Self::Context>,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<Self as MyTrait>::Context` cannot be sent between threads safely
   |
   = help: the trait `Send` is not implemented for `<Self as MyTrait>::Context`, which is required by `<Self as MyTrait>::Context: ServerContext`
   = note: required for `<Self as MyTrait>::Context` to implement `ServerContext`
note: required by a bound in `RequestContext`
  --> src/handler.rs
   |
   | pub struct RequestContext<Context: ServerContext> {
   |                                    ^^^^^^^^^^^^^ required by this bound in `RequestContext`
help: consider further restricting the associated type
   |
22 |     ) -> Result<HttpResponseUpdatedNoContent, HttpError> where <Self as MyTrait>::Context: Send;
   |                                                          ++++++++++++++++++++++++++++++++++++++

error[E0277]: `<Self as MyTrait>::Context` cannot be shared between threads safely
  --> tests/fail/bad_endpoint27.rs:21:17
   |
21 |         _rqctx: RequestContext<Self::Context>,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<Self as MyTrait>::Context` cannot be shared between threads safely
   |
   = help: the trait `Sync` is not implemented for `<Self as MyTrait>::Context`, which is required by `<Self as MyTrait>::Context: ServerContext`
   = note: required for `<Self as MyTrait>::Context` to implement `ServerContext`
note: required by a bound in `RequestContext`
  --> src/handler.rs
   |
   | pub struct RequestContext<Context: ServerContext> {
   |                                    ^^^^^^^^^^^^^ required by this bound in `RequestContext`
help: consider further restricting the associated type
   |
22 |     ) -> Result<HttpResponseUpdatedNoContent, HttpError> where <Self as MyTrait>::Context: Sync;
   |                                                          ++++++++++++++++++++++++++++++++++++++
