error[E0277]: the trait bound `std::string::String: HttpCodedResponse` is not satisfied
  --> tests/fail/bad_server_endpoint12.rs:24:10
   |
24 |     ) -> Result<String, HttpError>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HttpCodedResponse` is not implemented for `std::string::String`
   |
   = help: the following other types implement trait `HttpCodedResponse`:
             HttpResponseCreated<T>
             HttpResponseAccepted<T>
             HttpResponseOk<T>
             HttpResponseDeleted
             HttpResponseUpdatedNoContent
             dropshot::handler::HttpResponseFoundStatus
             dropshot::handler::HttpResponseSeeOtherStatus
             dropshot::handler::HttpResponseTemporaryRedirectStatus
   = note: required for `std::string::String` to implement `HttpResponse`
   = note: required for `Result<std::string::String, dropshot::HttpError>` to implement `dropshot::api_description::HttpResultType`
note: required by a bound in `ApiEndpoint::<StubContext>::new_stub`
  --> src/api_description.rs
   |
   |     pub fn new_stub<FuncParams, ResultType>(
   |            -------- required by a bound in this associated function
...
   |         ResultType: HttpResultType,
   |                     ^^^^^^^^^^^^^^ required by this bound in `ApiEndpoint::<StubContext>::new_stub`

error[E0277]: the trait bound `fn(RequestContext<<ServerImpl as MyServer>::Context>) -> impl Future<Output = Result<std::string::String, dropshot::HttpError>> + Send + 'static {<ServerImpl as MyServer>::bad_response_type}: dropshot::handler::HttpHandlerFunc<_, _, _>` is not satisfied
  --> tests/fail/bad_server_endpoint12.rs:18:5
   |
14 |   #[dropshot::server]
   |   ------------------- required by a bound introduced by this call
...
18 | /     #[endpoint {
19 | |         method = GET,
20 | |         path = "/test",
21 | |     }]
22 | |     async fn bad_response_type(
   | |______________________________^ the trait `dropshot::handler::HttpHandlerFunc<_, _, _>` is not implemented for fn item `fn(RequestContext<<ServerImpl as MyServer>::Context>) -> ... {<... as MyServer>::bad_response_type}`
   |
note: required by a bound in `ApiEndpoint::<Context>::new`
  --> src/api_description.rs
   |
   |     pub fn new<HandlerType, FuncParams, ResponseType>(
   |            --- required by a bound in this associated function
...
   |         HandlerType: HttpHandlerFunc<Context, FuncParams, ResponseType>,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ApiEndpoint::<Context>::new`
