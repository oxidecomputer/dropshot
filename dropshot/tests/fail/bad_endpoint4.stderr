error[E0277]: the trait bound `QueryParams: schemars::JsonSchema` is not satisfied
  --> tests/fail/bad_endpoint4.rs:23:14
   |
23 |     _params: Query<QueryParams>,
   |              ^^^^^^^^^^^^^^^^^^ the trait `schemars::JsonSchema` is not implemented for `QueryParams`
   |
   = help: the following other types implement trait `schemars::JsonSchema`:
             &'a T
             &'a mut T
             ()
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
           and $N others
note: required by a bound in `dropshot::Query`
  --> src/extractor/query.rs
   |
   | pub struct Query<QueryType: DeserializeOwned + JsonSchema + Send + Sync> {
   |                                                ^^^^^^^^^^ required by this bound in `Query`

error[E0277]: the trait bound `for<'de> QueryParams: serde::de::Deserialize<'de>` is not satisfied
  --> tests/fail/bad_endpoint4.rs:23:14
   |
23 |     _params: Query<QueryParams>,
   |              ^^^^^^^^^^^^^^^^^^ the trait `for<'de> serde::de::Deserialize<'de>` is not implemented for `QueryParams`, which is required by `QueryParams: serde::de::DeserializeOwned`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `QueryParams` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `serde::de::Deserialize<'de>`:
             &'a [u8]
             &'a camino::Utf8Path
             &'a std::path::Path
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and $N others
   = note: required for `QueryParams` to implement `serde::de::DeserializeOwned`
note: required by a bound in `dropshot::Query`
  --> src/extractor/query.rs
   |
   | pub struct Query<QueryType: DeserializeOwned + JsonSchema + Send + Sync> {
   |                             ^^^^^^^^^^^^^^^^ required by this bound in `Query`

error[E0277]: the trait bound `QueryParams: schemars::JsonSchema` is not satisfied
  --> tests/fail/bad_endpoint4.rs:21:1
   |
21 | / async fn bad_endpoint(
22 | |     _rqctx: RequestContext<()>,
23 | |     _params: Query<QueryParams>,
24 | | ) -> Result<HttpResponseOk<()>, HttpError> {
   | |__________________________________________^ the trait `schemars::JsonSchema` is not implemented for `QueryParams`
   |
   = help: the following other types implement trait `schemars::JsonSchema`:
             &'a T
             &'a mut T
             ()
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
           and $N others
note: required by a bound in `dropshot::Query`
  --> src/extractor/query.rs
   |
   | pub struct Query<QueryType: DeserializeOwned + JsonSchema + Send + Sync> {
   |                                                ^^^^^^^^^^ required by this bound in `Query`

error[E0277]: the trait bound `for<'de> QueryParams: serde::de::Deserialize<'de>` is not satisfied
  --> tests/fail/bad_endpoint4.rs:21:1
   |
21 | / async fn bad_endpoint(
22 | |     _rqctx: RequestContext<()>,
23 | |     _params: Query<QueryParams>,
24 | | ) -> Result<HttpResponseOk<()>, HttpError> {
   | |__________________________________________^ the trait `for<'de> serde::de::Deserialize<'de>` is not implemented for `QueryParams`, which is required by `QueryParams: serde::de::DeserializeOwned`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `QueryParams` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `serde::de::Deserialize<'de>`:
             &'a [u8]
             &'a camino::Utf8Path
             &'a std::path::Path
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and $N others
   = note: required for `QueryParams` to implement `serde::de::DeserializeOwned`
note: required by a bound in `dropshot::Query`
  --> src/extractor/query.rs
   |
   | pub struct Query<QueryType: DeserializeOwned + JsonSchema + Send + Sync> {
   |                             ^^^^^^^^^^^^^^^^ required by this bound in `Query`

error[E0277]: the trait bound `fn(RequestContext<()>, dropshot::Query<QueryParams>) -> impl Future<Output = Result<HttpResponseOk<()>, HttpError>> {<impl std::convert::From<bad_endpoint> for ApiEndpoint<<RequestContext<()> as RequestContextArgument>::Context>>::from::bad_endpoint}: dropshot::handler::HttpHandlerFunc<_, _, _>` is not satisfied
  --> tests/fail/bad_endpoint4.rs:21:10
   |
17 | / #[endpoint {
18 | |     method = GET,
19 | |     path = "/test",
20 | | }]
   | |__- required by a bound introduced by this call
21 |   async fn bad_endpoint(
   |            ^^^^^^^^^^^^ the trait `dropshot::handler::HttpHandlerFunc<_, _, _>` is not implemented for fn item `fn(RequestContext<()>, dropshot::Query<QueryParams>) -> impl Future<Output = Result<HttpResponseOk<()>, HttpError>> {<impl std::convert::From<bad_endpoint> for ApiEndpoint<<RequestContext<()> as RequestContextArgument>::Context>>::from::bad_endpoint}`
   |
note: required by a bound in `ApiEndpoint::<Context>::new`
  --> src/api_description.rs
   |
   |     pub fn new<HandlerType, FuncParams, ResponseType>(
   |            --- required by a bound in this associated function
...
   |         HandlerType: HttpHandlerFunc<Context, FuncParams, ResponseType>,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ApiEndpoint::<Context>::new`

error[E0277]: the trait bound `QueryParams: schemars::JsonSchema` is not satisfied
  --> tests/fail/bad_endpoint4.rs:17:1
   |
17 | / #[endpoint {
18 | |     method = GET,
19 | |     path = "/test",
20 | | }]
   | |__^ the trait `schemars::JsonSchema` is not implemented for `QueryParams`
   |
   = help: the following other types implement trait `schemars::JsonSchema`:
             &'a T
             &'a mut T
             ()
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
           and $N others
note: required by a bound in `dropshot::Query`
  --> src/extractor/query.rs
   |
   | pub struct Query<QueryType: DeserializeOwned + JsonSchema + Send + Sync> {
   |                                                ^^^^^^^^^^ required by this bound in `Query`
   = note: this error originates in the attribute macro `endpoint` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `for<'de> QueryParams: serde::de::Deserialize<'de>` is not satisfied
  --> tests/fail/bad_endpoint4.rs:17:1
   |
17 | / #[endpoint {
18 | |     method = GET,
19 | |     path = "/test",
20 | | }]
   | |__^ the trait `for<'de> serde::de::Deserialize<'de>` is not implemented for `QueryParams`, which is required by `QueryParams: serde::de::DeserializeOwned`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `QueryParams` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `serde::de::Deserialize<'de>`:
             &'a [u8]
             &'a camino::Utf8Path
             &'a std::path::Path
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and $N others
   = note: required for `QueryParams` to implement `serde::de::DeserializeOwned`
note: required by a bound in `dropshot::Query`
  --> src/extractor/query.rs
   |
   | pub struct Query<QueryType: DeserializeOwned + JsonSchema + Send + Sync> {
   |                             ^^^^^^^^^^^^^^^^ required by this bound in `Query`
   = note: this error originates in the attribute macro `endpoint` (in Nightly builds, run with -Z macro-backtrace for more info)
